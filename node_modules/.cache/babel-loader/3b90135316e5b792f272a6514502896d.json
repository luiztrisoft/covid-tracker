{"ast":null,"code":"import _regeneratorRuntime from \"/home/user/Workspace/REACT/covid-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/user/Workspace/REACT/covid-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/user/Workspace/REACT/covid-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/user/Workspace/REACT/covid-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/user/Workspace/REACT/covid-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/user/Workspace/REACT/covid-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/user/Workspace/REACT/covid-tracker/src/views/dashboard/Dashboard.jsx\";\nimport React, { Component } from 'react';\nimport { fetchData, fetchBrazilianDataByUf, fetchDailyData } from '../../global/services/covid-19';\nimport { Chart } from 'primereact/chart';\nimport { converter } from '../../global/util/ConverterEstados';\nimport { connect } from 'react-redux';\n\nvar Dashboard = /*#__PURE__*/function (_Component) {\n  _inherits(Dashboard, _Component);\n\n  var _super = _createSuper(Dashboard);\n\n  function Dashboard() {\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    _this = _super.call(this);\n\n    _this.percentualMortes = function (valor) {\n      return _this.calcularPercentual(valor);\n    };\n\n    _this.calcularPercentual = function () {\n      var _this$state$covidData = _this.state.covidData,\n          totalMortesBrasil = _this$state$covidData.totalMortesBrasil,\n          totalMortesMundo = _this$state$covidData.totalMortesMundo;\n      return totalMortesBrasil * 100 / totalMortesMundo;\n    };\n\n    _this.state = {\n      mortesBrasil: 0,\n      covidData: {\n        totalCasos: 0,\n        totalMortes: 0\n      },\n      dailyData: {},\n      estadosBrasileiros: {},\n      brasilMundo: {}\n    };\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var brasil, mundo, brazilianData, initialDailyData, estados;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetchData('Brazil');\n\n              case 2:\n                brasil = _context.sent;\n                _context.next = 5;\n                return fetchData();\n\n              case 5:\n                mundo = _context.sent;\n                _context.next = 8;\n                return fetchBrazilianDataByUf();\n\n              case 8:\n                brazilianData = _context.sent;\n                _context.next = 11;\n                return fetchDailyData();\n\n              case 11:\n                initialDailyData = _context.sent;\n                // console.log('DADOS DIARIOS: ', initialDailyData)\n                //initialDailyData.filter(date => new Date(date) < new Date('2020-02-02')).map(({ date }) => console.log(date))\n                initialDailyData.forEach(function (element) {\n                  // console.log('Fixo', new Date('2020-01-22'))\n                  // console.log('Var', new Date(element.date))\n                  if (new Date(element.date) > new Date('2020-05-22') && new Date(element.date) < new Date('2020-05-29')) {\n                    console.log(element.date);\n                  }\n                });\n                estados = [];\n                brazilianData.map(function (_estado) {\n                  return estados.push({\n                    'estado': converter(_estado.provinceState),\n                    'mortes': _estado.deaths\n                  });\n                });\n                this.setState({\n                  estadosBrasileiros: {\n                    labels: estados.map(function (e) {\n                      return e.estado;\n                    }),\n                    datasets: [{\n                      label: 'Total de mortes por estados brasileiros',\n                      backgroundColor: '#8a4baf',\n                      data: estados.map(function (e) {\n                        return e.mortes;\n                      })\n                    }]\n                  },\n                  covidData: {\n                    totalMortesBrasil: brasil.deaths.value,\n                    totalMortesMundo: mundo.deaths.value,\n                    totalCasos: brasil.confirmed.value,\n                    labels: ['Mundo', 'Brasil'],\n                    datasets: [{\n                      label: 'Total de casos',\n                      backgroundColor: '#663399',\n                      data: [mundo.confirmed.value, brasil.confirmed.value]\n                    }, {\n                      label: 'Mortes',\n                      backgroundColor: '#d9bae8',\n                      data: [mundo.deaths.value, brasil.deaths.value]\n                    }]\n                  },\n                  brasilMundo: {\n                    labels: ['Mortes no Brasil', 'Mortes no mundo'],\n                    datasets: [{\n                      data: [brasil.deaths.value, mundo.deaths.value],\n                      backgroundColor: [\"#663399\", \"#d9bae8\"]\n                    }]\n                  },\n                  dailyData: {\n                    labels: initialDailyData.map(function (_ref) {\n                      var date = _ref.date;\n                      return date;\n                    }),\n                    //labels: initialDailyData.forEach(element =>  (new Date(element.date) > new Date('2020-05-22') && new Date(element.date) < new Date('2020-05-29'))),\n                    datasets: [{\n                      data: initialDailyData.map(function (data) {\n                        return data.deaths;\n                      }),\n                      label: 'Mortes',\n                      borderColor: '#fff',\n                      backgroundColor: \"#663399\",\n                      fill: false // },{\n                      //     data: initialDailyData.map((data) => data.confirmed),\n                      //     label: 'Infectados',\n                      //     borderColor: '#d9bae8',\n                      //     backgroundColor: '#ddd',\n                      //     fill: true\n\n                    }]\n                  }\n                });\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      //https://covid19.mathdro.id/api/countries/Brazil/deaths\n      //Tirar mais dados do brasil     \n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-grid p-fluid\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-col-12 p-lg-12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fas fa-home\",\n        style: {\n          marginRight: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }\n      }), this.props.dashboardInfo.name, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          marginLeft: '10px',\n          fontSize: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }\n      }, \"Version: \", this.props.dashboardInfo.version))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-col-12 p-lg-12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Chart, {\n        type: \"bar\",\n        data: this.state.estadosBrasileiros,\n        height: \"70\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 24\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-col-12 p-lg-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 18\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"centerText\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }\n      }, \" Compara\\xE7\\xE3o entre Brasil e o mundo \"), /*#__PURE__*/React.createElement(Chart, {\n        type: \"bar\",\n        data: this.state.covidData,\n        height: \"130\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 24\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-col-12 p-lg-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"centerText\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }\n      }, this.percentualMortes() || 0, \" \"), /*#__PURE__*/React.createElement(Chart, {\n        type: \"pie\",\n        data: this.state.brasilMundo,\n        height: \"130\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-col-12 p-lg-12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Chart, {\n        type: \"line\",\n        data: this.state.dailyData,\n        height: \"100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 26\n        }\n      }))));\n    }\n  }]);\n\n  return Dashboard;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    dashboardInfo: store.dashboardReducer.dashboardInfo\n  };\n};\n\nexport default connect(mapStateToProps, null)(Dashboard);","map":{"version":3,"sources":["/home/user/Workspace/REACT/covid-tracker/src/views/dashboard/Dashboard.jsx"],"names":["React","Component","fetchData","fetchBrazilianDataByUf","fetchDailyData","Chart","converter","connect","Dashboard","percentualMortes","valor","calcularPercentual","state","covidData","totalMortesBrasil","totalMortesMundo","mortesBrasil","totalCasos","totalMortes","dailyData","estadosBrasileiros","brasilMundo","brasil","mundo","brazilianData","initialDailyData","forEach","element","Date","date","console","log","estados","map","_estado","push","provinceState","deaths","setState","labels","e","estado","datasets","label","backgroundColor","data","mortes","value","confirmed","borderColor","fill","marginRight","props","dashboardInfo","name","marginLeft","fontSize","version","mapStateToProps","store","dashboardReducer"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,SAAR,EAAmBC,sBAAnB,EAA2CC,cAA3C,QAAgE,gCAAhE;AACA,SAAQC,KAAR,QAAoB,kBAApB;AACA,SAAQC,SAAR,QAAwB,oCAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;;IAEMC,S;;;;;AACF,uBAAc;AAAA;;AAAA;;AACV;;AADU,UAiGdC,gBAjGc,GAiGK,UAACC,KAAD,EAAU;AACzB,aAAO,MAAKC,kBAAL,CAAwBD,KAAxB,CAAP;AACH,KAnGa;;AAAA,UAqGdC,kBArGc,GAqGO,YAAK;AAAA,kCACwB,MAAKC,KAAL,CAAWC,SADnC;AAAA,UACfC,iBADe,yBACfA,iBADe;AAAA,UACIC,gBADJ,yBACIA,gBADJ;AAEvB,aAAQD,iBAAiB,GAAG,GAArB,GAA4BC,gBAAnC;AACF,KAxGa;;AAEV,UAAKH,KAAL,GAAa;AACTI,MAAAA,YAAY,EAAC,CADJ;AAGTH,MAAAA,SAAS,EAAE;AACPI,QAAAA,UAAU,EAAE,CADL;AAEPC,QAAAA,WAAW,EAAE;AAFN,OAHF;AAOTC,MAAAA,SAAS,EAAC,EAPD;AAQTC,MAAAA,kBAAkB,EAAC,EARV;AASTC,MAAAA,WAAW,EAAE;AATJ,KAAb;AAFU;AAab;;;;;;;;;;;;uBAGwBnB,SAAS,CAAC,QAAD,C;;;AAAxBoB,gBAAAA,M;;uBACcpB,SAAS,E;;;AAAvBqB,gBAAAA,K;;uBACsBpB,sBAAsB,E;;;AAA5CqB,gBAAAA,a;;uBAGyBpB,cAAc,E;;;AAAvCqB,gBAAAA,gB;AACN;AACA;AAEAA,gBAAAA,gBAAgB,CAACC,OAAjB,CAAyB,UAAAC,OAAO,EAAI;AAChC;AACA;AACA,sBAAG,IAAIC,IAAJ,CAASD,OAAO,CAACE,IAAjB,IAAyB,IAAID,IAAJ,CAAS,YAAT,CAAzB,IAAmD,IAAIA,IAAJ,CAASD,OAAO,CAACE,IAAjB,IAAyB,IAAID,IAAJ,CAAS,YAAT,CAA/E,EAAsG;AAClGE,oBAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAO,CAACE,IAApB;AACH;AACJ,iBAND;AAQIG,gBAAAA,O,GAAU,E;AACdR,gBAAAA,aAAa,CAACS,GAAd,CAAkB,UAACC,OAAD;AAAA,yBACdF,OAAO,CAACG,IAAR,CAAa;AAAC,8BAAU7B,SAAS,CAAC4B,OAAO,CAACE,aAAT,CAApB;AAA6C,8BAASF,OAAO,CAACG;AAA9D,mBAAb,CADc;AAAA,iBAAlB;AAGA,qBAAKC,QAAL,CAAc;AACVlB,kBAAAA,kBAAkB,EAAC;AACfmB,oBAAAA,MAAM,EAAEP,OAAO,CAACC,GAAR,CAAY,UAACO,CAAD;AAAA,6BAAOA,CAAC,CAACC,MAAT;AAAA,qBAAZ,CADO;AAEfC,oBAAAA,QAAQ,EAAE,CACN;AACIC,sBAAAA,KAAK,EAAE,yCADX;AAEIC,sBAAAA,eAAe,EAAE,SAFrB;AAGIC,sBAAAA,IAAI,EAAEb,OAAO,CAACC,GAAR,CAAY,UAACO,CAAD;AAAA,+BAAOA,CAAC,CAACM,MAAT;AAAA,uBAAZ;AAHV,qBADM;AAFK,mBADT;AAWVjC,kBAAAA,SAAS,EAAE;AACPC,oBAAAA,iBAAiB,EAAEQ,MAAM,CAACe,MAAP,CAAcU,KAD1B;AAEPhC,oBAAAA,gBAAgB,EAAEQ,KAAK,CAACc,MAAN,CAAaU,KAFxB;AAGP9B,oBAAAA,UAAU,EAAEK,MAAM,CAAC0B,SAAP,CAAiBD,KAHtB;AAIPR,oBAAAA,MAAM,EAAE,CAAC,OAAD,EAAU,QAAV,CAJD;AAKPG,oBAAAA,QAAQ,EAAE,CACN;AACIC,sBAAAA,KAAK,EAAE,gBADX;AAEIC,sBAAAA,eAAe,EAAE,SAFrB;AAGIC,sBAAAA,IAAI,EAAE,CAACtB,KAAK,CAACyB,SAAN,CAAgBD,KAAjB,EAAuBzB,MAAM,CAAC0B,SAAP,CAAiBD,KAAxC;AAHV,qBADM,EAMN;AACIJ,sBAAAA,KAAK,EAAE,QADX;AAEIC,sBAAAA,eAAe,EAAE,SAFrB;AAGIC,sBAAAA,IAAI,EAAE,CAAEtB,KAAK,CAACc,MAAN,CAAaU,KAAf,EAAsBzB,MAAM,CAACe,MAAP,CAAcU,KAApC;AAHV,qBANM;AALH,mBAXD;AA6BV1B,kBAAAA,WAAW,EAAC;AACRkB,oBAAAA,MAAM,EAAE,CAAC,kBAAD,EAAqB,iBAArB,CADA;AAERG,oBAAAA,QAAQ,EAAE,CACN;AACIG,sBAAAA,IAAI,EAAE,CAACvB,MAAM,CAACe,MAAP,CAAcU,KAAf,EAAsBxB,KAAK,CAACc,MAAN,CAAaU,KAAnC,CADV;AAEIH,sBAAAA,eAAe,EAAE,CAAC,SAAD,EAAW,SAAX;AAFrB,qBADM;AAFF,mBA7BF;AAuCVzB,kBAAAA,SAAS,EAAE;AACPoB,oBAAAA,MAAM,EAAEd,gBAAgB,CAACQ,GAAjB,CAAqB;AAAA,0BAAGJ,IAAH,QAAGA,IAAH;AAAA,6BAAcA,IAAd;AAAA,qBAArB,CADD;AAEP;AAEAa,oBAAAA,QAAQ,EAAE,CAAC;AACHG,sBAAAA,IAAI,EAAEpB,gBAAgB,CAACQ,GAAjB,CAAqB,UAACY,IAAD;AAAA,+BAAUA,IAAI,CAACR,MAAf;AAAA,uBAArB,CADH;AAEHM,sBAAAA,KAAK,EAAE,QAFJ;AAGHM,sBAAAA,WAAW,EAAE,MAHV;AAIHL,sBAAAA,eAAe,EAAE,SAJd;AAKHM,sBAAAA,IAAI,EAAE,KALH,CAMP;AACA;AACA;AACA;AACA;AACA;;AAXO,qBAAD;AAJH;AAvCD,iBAAd;;;;;;;;;;;;;;;;;;6BAuEK;AACL;AACA;AACA,0BACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAG,QAAA,SAAS,EAAC,aAAb;AAA2B,QAAA,KAAK,EAAE;AAACC,UAAAA,WAAW,EAAE;AAAd,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEK,KAAKC,KAAL,CAAWC,aAAX,CAAyBC,IAF9B,eAGI;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,UAAU,EAAE,MAAb;AAAqBC,UAAAA,QAAQ,EAAE;AAA/B,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA+D,KAAKJ,KAAL,CAAWC,aAAX,CAAyBI,OAAxF,CAHJ,CADJ,CADJ,eASI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACG,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,KAAZ;AAAkB,QAAA,IAAI,EAAE,KAAK7C,KAAL,CAAWQ,kBAAnC;AAAuD,QAAA,MAAM,EAAC,IAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,CADJ,CATJ,eAeK;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACG;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA;AAAO,QAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDADA,eAEG,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,KAAZ;AAAkB,QAAA,IAAI,EAAE,KAAKR,KAAL,CAAWC,SAAnC;AAA8C,QAAA,MAAM,EAAC,KAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFH,CADH,CAfL,eAsBI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA;AAAO,QAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B,KAAKJ,gBAAL,MAA2B,CAA1D,MADA,eAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,KAAZ;AAAkB,QAAA,IAAI,EAAE,KAAKG,KAAL,CAAWS,WAAnC;AAAgD,QAAA,MAAM,EAAC,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ,CAtBJ,eA8BI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACK,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAE,KAAKT,KAAL,CAAWO,SAApC;AAA+C,QAAA,MAAM,EAAC,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADL,CADJ,CA9BJ,CADJ;AAsCH;;;;EAtJmBlB,S;;AAyJxB,IAAMyD,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAC9BN,IAAAA,aAAa,EAAEM,KAAK,CAACC,gBAAN,CAAuBP;AADR,GAAL;AAAA,CAA7B;;AAIA,eAAe9C,OAAO,CAACmD,eAAD,EAAkB,IAAlB,CAAP,CAA+BlD,SAA/B,CAAf","sourcesContent":["import React, {Component} from 'react';\nimport {fetchData, fetchBrazilianDataByUf, fetchDailyData} from '../../global/services/covid-19'\nimport {Chart} from 'primereact/chart';\nimport {converter} from '../../global/util/ConverterEstados'\nimport { connect } from 'react-redux';\n\nclass Dashboard extends Component {    \n    constructor() {\n        super();\n        this.state = {\n            mortesBrasil:0,\n            \n            covidData: {\n                totalCasos: 0,\n                totalMortes: 0\n            },\n            dailyData:{},\n            estadosBrasileiros:{},\n            brasilMundo: {}\n        };\n    }\n\n    async componentDidMount(){\n        const brasil = await fetchData('Brazil');\n        const mundo = await fetchData();\n        const brazilianData = await fetchBrazilianDataByUf()\n        \n        //Teste para grafico de linha\n        const initialDailyData = await fetchDailyData();\n        // console.log('DADOS DIARIOS: ', initialDailyData)\n        //initialDailyData.filter(date => new Date(date) < new Date('2020-02-02')).map(({ date }) => console.log(date))\n\n        initialDailyData.forEach(element => {\n            // console.log('Fixo', new Date('2020-01-22'))\n            // console.log('Var', new Date(element.date))\n            if(new Date(element.date) > new Date('2020-05-22') && new Date(element.date) < new Date('2020-05-29')){\n                console.log(element.date)\n            }\n        });\n        \n        let estados = [];\n        brazilianData.map((_estado)=>(            \n            estados.push({'estado': converter(_estado.provinceState), 'mortes':_estado.deaths})\n        ))\n        this.setState({\n            estadosBrasileiros:{                 \n                labels: estados.map((e) => e.estado),\n                datasets: [\n                    {\n                        label: 'Total de mortes por estados brasileiros',\n                        backgroundColor: '#8a4baf',\n                        data: estados.map((e) => e.mortes)\n                    }\n                ]\n            },\n            covidData: {\n                totalMortesBrasil: brasil.deaths.value,\n                totalMortesMundo: mundo.deaths.value,\n                totalCasos: brasil.confirmed.value,\n                labels: ['Mundo', 'Brasil'],\n                datasets: [\n                    {\n                        label: 'Total de casos',\n                        backgroundColor: '#663399',\n                        data: [mundo.confirmed.value,brasil.confirmed.value]\n                    },                                       \n                    {\n                        label: 'Mortes',\n                        backgroundColor: '#d9bae8',\n                        data: [ mundo.deaths.value, brasil.deaths.value]\n                    }\n                ]\n            },\n            brasilMundo:{\n                labels: ['Mortes no Brasil', 'Mortes no mundo'],\n                datasets: [\n                    {\n                        data: [brasil.deaths.value, mundo.deaths.value],\n                        backgroundColor: [\"#663399\",\"#d9bae8\"]\n                    }\n                ]                \n            },\n    \n            dailyData: {\n                labels: initialDailyData.map(({ date }) => date),\n                //labels: initialDailyData.forEach(element =>  (new Date(element.date) > new Date('2020-05-22') && new Date(element.date) < new Date('2020-05-29'))),\n               \n                datasets: [{                      \n                        data: initialDailyData.map((data) => data.deaths),                  \n                        label: 'Mortes',\n                        borderColor: '#fff',   \n                        backgroundColor: \"#663399\",               \n                        fill: false,\n                    // },{\n                    //     data: initialDailyData.map((data) => data.confirmed),\n                    //     label: 'Infectados',\n                    //     borderColor: '#d9bae8',\n                    //     backgroundColor: '#ddd',\n                    //     fill: true\n                    }\n            ]}\n        })        \n    }\n\n    percentualMortes = (valor) =>{\n        return this.calcularPercentual(valor)\n    }\n\n    calcularPercentual = () =>{\n        const {totalMortesBrasil, totalMortesMundo} = this.state.covidData;\n       return (totalMortesBrasil * 100) / totalMortesMundo;       \n    }\n        \n    \n\n    render() {   \n        //https://covid19.mathdro.id/api/countries/Brazil/deaths\n        //Tirar mais dados do brasil     \n        return (  \n            <div className=\"p-grid p-fluid\">   \n                <div className=\"p-col-12 p-lg-12\">        \n                    <h1 > \n                        <i className='fas fa-home' style={{marginRight: '10px'}}/> \n                        {this.props.dashboardInfo.name}\n                        <span style={{marginLeft: '10px', fontSize: '10px'}}>Version: {this.props.dashboardInfo.version}</span>\n                    </h1>          \n                </div> \n\n                <div className=\"p-col-12 p-lg-12\">\n                    <div className=\"card\">\n                       <Chart type=\"bar\" data={this.state.estadosBrasileiros} height=\"70\"/>\n                    </div>\n                </div>\n\n                 <div className=\"p-col-12 p-lg-6\">\n                    <div className=\"card\">\n                    <label className=\"centerText\"> Comparação entre Brasil e o mundo </label>\n                       <Chart type=\"bar\" data={this.state.covidData} height=\"130\"/>\n                    </div>\n                </div>      \n\n                <div className=\"p-col-12 p-lg-6\">\n                    <div className=\"card\"> \n                    <label className=\"centerText\">{this.percentualMortes() || 0} </label>                                           \n                        <Chart type=\"pie\" data={this.state.brasilMundo} height=\"130\"/>\n                    </div>           \n                </div>  \n\n                \n                <div className=\"p-col-12 p-lg-12\">\n                    <div className=\"card\">\n                         <Chart type=\"line\" data={this.state.dailyData} height='100'/>   \n                    </div>\n                </div>            \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = store => ({\n    dashboardInfo: store.dashboardReducer.dashboardInfo\n  });\n\nexport default connect(mapStateToProps, null)(Dashboard);"]},"metadata":{},"sourceType":"module"}